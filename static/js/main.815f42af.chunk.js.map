{"version":3,"sources":["components/Sidebar.js","components/Topbar.js","components/EmailList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","drawer","width","flexShrink","drawerPaper","toolbar","mixins","tags","margin","Sidebar","inboxEmails","classes","mockedEmails","messages","reduce","allTags","email","concat","Set","Drawer","className","variant","paper","anchor","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","map","tag","i","Chip","key","color","label","appBar","marginLeft","Topbar","emailsSelected","onDeleteEmail","useEffect","console","log","AppBar","position","Toolbar","IconButton","onClick","deleteSelected","Typography","noWrap","root","flexGrow","padding","spacing","emailPreview","display","alignItems","date","fontWeight","subject","EmailList","emails","selectedEmails","onEmailsSelected","clearSelected","getEmailPreview","body","__html","substring","sender","dangerouslySetInnerHTML","moment","format","id","dense","currentIndex","indexOf","newSelected","push","splice","handleToggle","Checkbox","edge","checked","includes","tabIndex","disableRipple","ListItemSecondaryAction","createMuiTheme","palette","main","secondary","App","useState","data","setData","filter","ThemeProvider","Boolean","length","value","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.815f42af.chunk.js","sourcesContent":["import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { makeStyles} from '@material-ui/core/styles';\n\n\nimport mockedEmails from \"../mockData/emails\";\n\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    width: 240,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: 240,\n  },\n  toolbar: theme.mixins.toolbar,\n  tags: {\n    margin: '5px'\n  }\n}));\n\nfunction Sidebar({inboxEmails}) {\n  const classes = useStyles();\n  let tags = mockedEmails.messages.reduce((allTags, email) => allTags.concat(email.tags), []);\n  tags= [...new Set([...tags])];\n\n  return (\n    <>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar} />\n        <Divider />\n        <List>\n          <ListItem button>\n            <ListItemIcon><InboxIcon /></ListItemIcon>\n            <ListItemText primary={`Inbox (${inboxEmails})`} />\n          </ListItem>\n          <ListItem button>\n            <ListItemIcon><MailIcon /></ListItemIcon>\n            <ListItemText primary={'Trash'} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button>\n            <ListItemText primary={'Tags'} />\n          </ListItem>\n          <div>\n            {tags.map((tag,i) => <Chip key={i} className={classes.tags} variant=\"outlined\" color=\"secondary\" label={tag}/>)}\n          </div>\n        </List>\n\n      </Drawer>\n    </>\n  );\n}\n\nexport default Sidebar;","import React, {useEffect} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    width: 'calc(100% - 240px)',\n    marginLeft: 240,\n  },\n}));\n\nfunction Topbar({emailsSelected, onDeleteEmail}) {\n  const classes = useStyles();\n\n  useEffect(() => {\n    console.log(emailsSelected)\n  }, [emailsSelected])\n  return (\n    <>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n        {emailsSelected && \n            <span>\n              <IconButton onClick={() => onDeleteEmail({deleteSelected: true})}>\n                <DeleteIcon />\n              </IconButton>\n            </span>\n          }\n          {!emailsSelected && \n            <Typography variant=\"h6\" noWrap>\n              Mail\n            </Typography>\n          }\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n}\n\nexport default Topbar;","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    flexGrow: 2,\n    padding: theme.spacing(3),\n  },\n  emailPreview: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  toolbar: theme.mixins.toolbar,\n  date: {\n    marginLeft: 'auto',\n    fontWeight: 'bold'\n  },\n  subject: {\n    fontWeight: 'bold'\n  },\n  tags: {\n    marginLeft: '5px'    \n  }\n}));\n\nfunction EmailList({emails, selectedEmails, onDeleteEmail, onEmailsSelected, clearSelected}) {\n  const classes = useStyles();\n\n  const handleToggle = (id) => {\n    const currentIndex = selectedEmails.indexOf(id);\n    const newSelected = [...selectedEmails];\n\n    if (currentIndex === -1) {\n      newSelected.push(id);\n    } else {\n      newSelected.splice(currentIndex, 1);\n    }\n\n    onEmailsSelected(newSelected)\n  };\n\n  const getEmailPreview = (email) => {\n    const body = {__html: email.body.substring(0, 50)}\n    return (\n      <div className={classes.emailPreview}>\n        <div className={classes.subject}>{`${email.subject} ${email.sender}`}</div>\n        &nbsp;{'-'}&nbsp;\n        <div dangerouslySetInnerHTML={body}/>\n        <div>\n          {email.tags.map((tag, i) => <Chip key={i} className={classes.tags} variant=\"outlined\" color=\"secondary\" label={tag}/>)}\n        </div>\n        <div className={classes.date}>{moment(email.date).format('MM-DD-YYYY')}</div>\n      </div>\n    )\n  }\n\n  return (\n    <List className={classes.root}>\n      <div className={classes.toolbar} />\n      {emails.map((email) => \n        <div key={email.id}>\n          <ListItem dense button onClick={() => handleToggle(email.id)}>\n            <ListItemIcon>\n              <Checkbox\n                edge=\"start\"\n                checked={selectedEmails.includes(email.id)}\n                tabIndex={-1}\n                disableRipple\n              />\n            </ListItemIcon>\n            <ListItemText id={email.id} primary={getEmailPreview(email)} />\n            <ListItemSecondaryAction>\n              <IconButton edge=\"end\" onClick={() => onDeleteEmail({id: email.id})}>\n                <DeleteIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n          <Divider />\n        </div>\n      )}\n    </List>\n  );\n}\n\nexport default EmailList;","import React, {useState} from 'react';\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Sidebar from \"./components/Sidebar\"\nimport Topbar from './components/Topbar';\nimport EmailList from './components/EmailList';\nimport mockedEmails from \"./mockData/emails\";\nimport './App.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#e53935',\n    },\n  },\n});\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [data, setData] = useState({\n    emails: mockedEmails.messages,\n    selectedEmails: []\n  });\n\n  const onEmailsSelected = (value) => {\n    console.log(value)\n    setData({\n      ...data,\n      selectedEmails: value\n    })\n  }\n\n  const onDeleteEmail = ({id, deleteSelected}) => {\n    if (deleteSelected) {\n      setData({\n        selectedEmails: [],\n        emails: data.emails.filter(email => !data.selectedEmails.includes(email.id))\n      })\n    } else {\n      setData({\n        ...data,\n        emails: data.emails.filter(email => email.id !== id)\n      })\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <Topbar \n          emailsSelected={Boolean(data.selectedEmails.length)}\n          onDeleteEmail={onDeleteEmail}>\n        </Topbar>\n        <Sidebar inboxEmails={data.emails.length}></Sidebar>\n        <EmailList \n          emails={data.emails}\n          selectedEmails={data.selectedEmails}\n          onDeleteEmail={onDeleteEmail}\n          onEmailsSelected={onEmailsSelected}>\n        </EmailList>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}